# -*- coding: utf-8 -*-
"""Copy of Panthers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CSsPd4G2HiPjL2WTevlGVAhxoJIZT4DL

Kenya’s goal is to reach 100% electricity connectivity by 2022. This is to enable a green economy run by 100% sustainable energy in terms of electricity generation and consumption. Additionally, in accordance with the Paris Agreement, Kenya committed itself to tackling climate change. The country’s determined contribution (National Determined Contribution), which is pegged on the 2013 Kenya Climate Change Action Plan, promises to reduce greenhouse gas (GHG) emissions by 30% by 2030 from 2015 (Ministry
of Environment and Natural Resources 2015).

The goal of this project is to determine what the current consumption of electricity is, type of energy source and how does it compare over the duration of the data and the Vision 2030 goals?

# DATA PREPARATION
"""

# Commented out IPython magic to ensure Python compatibility.
# Loading libraries into our environment

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

# Loading the datasets into the environment

Energy_2020 = pd.read_csv('Energy_Main_Lighting_Energy_Sources.csv')
Energy_2017 = pd.read_csv('Main_Lighting_Energy_Sources_averaged_to_Districts_in_2009.csv')

# Previewing Energy 2020
Energy_2020.head()

# Previewing Energy 2017
Energy_2017.head()

# Understanding the information contained in Energy 2020 columns
Energy_2020.info()

# Understanding the information contained in Energy 2017 columns
Energy_2017.info()

# Dropping unrequired fields from Energy 2020

Energy_2020.drop(['Electricty_percentage', 'Pressure_Lamp_percentage', 'Lantern_percentage', 'Tin_Lamp_percebntage', 'Gas_Lamp_percentage', 'Fuel_wood_percentage', 'Solar_percentage', 'Other_Lighting_percentage'], axis= 1, inplace= True)
Energy_2020.drop(['OBJECTID','Shape_Length', 'Shape_Area'], axis= 1, inplace= True)

# Dropping unrequired fields from Energy 2017
Energy_2017.drop(['%_of_households_with_electricty', '%_of_households_with_Pressure_Lamp', '%_of_households_with_Lantern', '%_of_households_with_Tin_Lamp', '%_of_households_with_Gas_Lamp', '%_of_households_with_Fuel_wood'], axis= 1, inplace= True)
Energy_2017.drop(['%_of_households_with_Solar', '%_of_households_with_Other', 'Province', 'Census_Table', 'MTEF', 'MTP', 'Longtitude', 'Latitude', 'Geolocation', 'OBJECTID'], axis= 1, inplace= True)

# Viewing the new table Energy 2020
Energy_2020.head()

# Viewing the new table Energy 2017
Energy_2017.head()

# Making the data consistent
Energy_2020.columns = Energy_2020.columns.str.replace('Number','No')
Energy_2017.drop('Rural_/_Urban', axis= 1, inplace= True)

# Prepared Table for Energy 2020
Energy_2020.head()

# Prepared Table for Energy 2017
Energy_2017.head()



"""# DATA CLEANING

## Validity of the data
"""

#2017 dataset column name rectification
Energy_2017.rename(columns= {'Housheolds': 'Households'}, inplace = True)
Energy_2017.head(2)

#Using the str.strip function on the column name to strip any leading and trailing spaces
Energy_2017['County'] = Energy_2017['County'].str.strip()
Energy_2020['County'] = Energy_2020['County'].str.strip()

# Displaying the resulting dataframe
Energy_2017.head(4)
Energy_2020.head(2)

#checking for errors/anomalies in records
Energy_2017['County'].unique()
Energy_2020['County'].unique()

#Using str.replace() function on the respective 2017 column to remove the apostrophe Murang'a
#

Energy_2017['County'] = Energy_2017['County'].str.replace("'","")

# Displaying the resulting dataframe
Energy_2017['County'].unique()

#Using str.replace() function on the respective 2020 column to remove the hyphens
#

Energy_2020['County'] = Energy_2020['County'].str.replace("-"," ")

# Displaying the resulting dataframe
Energy_2020['County'].unique()

"""## Accuracy of the data"""

Energy_2017.head(1)

# In-record & cross-datasets error checks
#2017 dataset accuracy check
e = Energy_2017['No_of_households_with_electricity'] + Energy_2017['No_of_households_with_Pressure_Lamp'] +Energy_2017['No_of_households_with_Lantern'] + Energy_2017['No_of_households_with_Tin_Lamp'] + Energy_2017['No_of_households_with_Gas_Lamp'] + Energy_2017['No_of_households_with_Fuel_wood'] + Energy_2017['No_of_households_with_Solar'] + Energy_2017['No_of_households_with_Other']
Energy_2017[Energy_2017['Households'] != e]

# In-record & cross-datasets error checks
#2020 dataset accuracy check
e1 = Energy_2020['No_of_households_with_electricity'] + Energy_2020['No_of_households_with_Pressure_Lamp'] +Energy_2020['No_of_households_with_Lantern'] + Energy_2020['No_of_households_with_Tin_Lamp'] + Energy_2020['No_of_households_with_Gas_Lamp'] + Energy_2020['No_of_households_with_Fuel_wood'] + Energy_2020['No_of_households_with_Solar'] + Energy_2020['No_of_households_with_Other']
Energy_2020[Energy_2020['Households'] != e1]

"""## Completeness of the data"""

# Checking if there is any missing value in 2017 dataset as a whole
Energy_2017.isnull().any()

# Checking if there is any missing value in 2020 dataset as a whole
Energy_2020.isnull().any()


# Checking if there is any missing value across each column and if so how many
# 2017 dataset
Energy_2017.isnull().sum()
# 2020 dataset
Energy_2020.isnull().sum()

"""## Consistency of the data"""

Energy_2017.head(1)

#Checking for duplicates
#2017 dataset (used households since some district names were duplicated but not the records)
Energy_2017[Energy_2017['Households'].duplicated() ==True]
#Rachuonyo was ignored because its household numbers different values
#Energy_2017[Energy_2017.duplicated(['_District'])==True].sort_values('_District')

#2020 dataset
Energy_2020[Energy_2020['County'].duplicated() ==True]

"""## Uniformity of the data"""

#Standardization of column names
#Using strip(), lower() and replace() functions
#2017 dataset
Energy_2017.columns = Energy_2017.columns.str.strip().str.lower()
Energy_2017.head(1)

#2020 dataset
Energy_2020.columns = Energy_2020.columns.str.strip().str.lower()
Energy_2020.head(1)

#checking data types
#2017 dataset
Energy_2017.info()

#2020 dataset
Energy_2020.info()

#2017 dataset group by to create a dataset of counties only like the 2020 datset
#Energy1_2017 = Energy_2017.groupby(['no_of_households_with_electricity', 'no_of_households_with_pressure_lamp', 'no_of_households_with_lantern', 'no_of_households_with_tin_lamp', 'no_of_households_with_gas_lamp', 'no_of_households_with_fuel_wood', 'no_of_households_with_solar','no_of_households_with_other'])['county'].sum().reset_index()
Energy1_2017 = Energy_2017.groupby(['county'])['no_of_households_with_electricity', 'no_of_households_with_pressure_lamp', 'no_of_households_with_lantern', 'no_of_households_with_tin_lamp', 'no_of_households_with_gas_lamp', 'no_of_households_with_fuel_wood', 'no_of_households_with_solar','no_of_households_with_other', 'households'].sum().reset_index()
Energy1_2017
#g1 = df1.groupby( [ "Name", "City"] ).count().reset_index()

#overall % elect
(Energy_2020['no_of_households_with_electricity'] +Energy_2020['no_of_households_with_solar']).sum()/Energy_2020['households'].sum()

"""Having carried out the above steps, it was observed that the two datasets were in fact the same original dataset based on 2011 data that had undergone cleaning. Additional research and data sourcing was carried out and the result was the adoption of the following data into our analysis

# DATA PREPARATION 2
"""

# Energy data from 2009
Energy_2009 = pd.read_csv('kenya-access-to-electricity-rates-per-county.csv')
Energy_2009.head()

# Making the above consistent with the previous data
Energy_2009.rename(columns= {'Counties': 'County', 'Access to electricity': 'percent_access_to_electricity' }, inplace = True)
Energy_2009.columns = Energy_2009.columns.str.strip().str.lower()
Energy_2009.head()

# Loading the world bank datasets into the environment

Source = pd.read_csv('share-elec-by-source.csv')
Fossil_Fuels = pd.read_csv('share-electricity-fossil-fuels.csv')
Carbon = pd.read_csv('share-electricity-low-carbon.csv')
Renewables = pd.read_csv('share-electricity-renewables.csv')
Electricity_access = pd.read_csv('share-of-the-population-with-access-to-electricity.csv')

# Previewing the datasets above
Source.head()

Fossil_Fuels.head()

Carbon.head()

Renewables.head()

Electricity_access.head()

# All data sets have values from 2000 that include all countries in the world.
# We'll need to access only data relative to Kenya
Source = Source[Source.Entity == 'Kenya']
Fossil_Fuels = Fossil_Fuels[Fossil_Fuels.Entity == 'Kenya']
Carbon = Carbon[Carbon.Entity == 'Kenya']
Renewables = Renewables[Renewables.Entity == 'Kenya']
Electricity_access = Electricity_access[Electricity_access.Entity == 'Kenya']

# We'll also drop the irrelevant column Code
Source.drop('Code', axis= 1, inplace=True)
Fossil_Fuels.drop('Code', axis= 1, inplace=True)
Carbon.drop('Code', axis= 1, inplace= True)
Renewables.drop('Code', axis= 1, inplace= True)
Electricity_access.drop('Code', axis= 1, inplace=True)

# Previewing the data
Source.head()

Fossil_Fuels.head()

Carbon.head()

Renewables.head()

Electricity_access.head()

# Consistency in columns
Source.columns = ['Entity', 'Year', 'Coal_percent_of_electricity', 'Oil_percent_of_electricity', 'Gas_percent_of_electricity', 'Nuclear_percent_of_electricity', 'Solar_percent_of_electricity',
                  'Wind_percent_of_electricity', 'Hydro_percent_of_electricity', 'Other_renewables_percent_of_electricity']
Fossil_Fuels.columns = ['Entity', 'Year', 'Fossil_Fuels_percent_of_electricity']
Carbon.columns = ['Entity', 'Year', 'Low_carbon_percent_of_electricity']
Renewables.columns = ['Entity', 'Year', 'Renewables_percent_of_electricity']
Electricity_access.columns = ['Entity', 'Year', 'percent_access_to_electricity']

"""# DATA CLEANING 2"""

#dropping fossil table as it's the same as the Oil % column in Source table.
#dropping Carbon table as it's the same as the renewables table.
#Appending renewables to t
Source.head()

Renewables.head()

Electricity_access.head()
