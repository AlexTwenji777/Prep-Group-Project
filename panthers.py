# -*- coding: utf-8 -*-
"""Copy of Panthers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CSsPd4G2HiPjL2WTevlGVAhxoJIZT4DL

Kenya’s goal is to reach 100% electricity connectivity by 2022. This is to enable a green economy run by 100% sustainable energy in terms of electricity generation and consumption. Additionally, in accordance with the Paris Agreement, Kenya committed itself to tackling climate change. The country’s determined contribution (National Determined Contribution), which is pegged on the 2013 Kenya Climate Change Action Plan, promises to reduce greenhouse gas (GHG) emissions by 30% by 2030 from 2015 (Ministry
of Environment and Natural Resources 2015).

The goal of this project is to determine what the current consumption of electricity is, type of energy source and how does it compare over the duration of the data and the Vision 2030 goals?

# DATA PREPARATION
"""

# Commented out IPython magic to ensure Python compatibility.
# Loading libraries into our environment

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

# Loading the datasets into the environment

Energy_2020 = pd.read_csv('Energy_Main_Lighting_Energy_Sources.csv')
Energy_2017 = pd.read_csv('Main_Lighting_Energy_Sources_averaged_to_Districts_in_2009.csv')

# Previewing Energy 2020
Energy_2020.head()

# Previewing Energy 2017
Energy_2017.head()

# Understanding the information contained in Energy 2020 columns
Energy_2020.info()

# Understanding the information contained in Energy 2017 columns
Energy_2017.info()

# Dropping unrequired fields from Energy 2020

Energy_2020.drop(['Electricty_percentage', 'Pressure_Lamp_percentage', 'Lantern_percentage', 'Tin_Lamp_percebntage', 'Gas_Lamp_percentage', 'Fuel_wood_percentage', 'Solar_percentage', 'Other_Lighting_percentage'], axis= 1, inplace= True)
Energy_2020.drop(['OBJECTID','Shape_Length', 'Shape_Area'], axis= 1, inplace= True)

# Dropping unrequired fields from Energy 2017
Energy_2017.drop(['%_of_households_with_electricty', '%_of_households_with_Pressure_Lamp', '%_of_households_with_Lantern', '%_of_households_with_Tin_Lamp', '%_of_households_with_Gas_Lamp', '%_of_households_with_Fuel_wood'], axis= 1, inplace= True)
Energy_2017.drop(['%_of_households_with_Solar', '%_of_households_with_Other', 'Province', 'Census_Table', 'MTEF', 'MTP', 'Longtitude', 'Latitude', 'Geolocation', 'OBJECTID'], axis= 1, inplace= True)

# Viewing the new table Energy 2020
Energy_2020.head()

# Viewing the new table Energy 2017
Energy_2017.head()

# Making the data consistent
Energy_2020.columns = Energy_2020.columns.str.replace('Number','No')
Energy_2017.drop('Rural_/_Urban', axis= 1, inplace= True)

# Prepared Table for Energy 2020
Energy_2020.head()

# Prepared Table for Energy 2017
Energy_2017.head()



"""# DATA CLEANING

## Validity of the data
"""

#2017 dataset column name rectification
Energy_2017.rename(columns= {'Housheolds': 'Households'}, inplace = True)
Energy_2017.head(2)

#Using the str.strip function on the column name to strip any leading and trailing spaces
Energy_2017['County'] = Energy_2017['County'].str.strip()
Energy_2020['County'] = Energy_2020['County'].str.strip()

# Displaying the resulting dataframe
Energy_2017.head(4)
Energy_2020.head(2)

#checking for errors/anomalies in records
Energy_2017['County'].unique()
Energy_2020['County'].unique()

#Using str.replace() function on the respective 2017 column to remove the apostrophe Murang'a
#

Energy_2017['County'] = Energy_2017['County'].str.replace("'","")

# Displaying the resulting dataframe
Energy_2017['County'].unique()

#Using str.replace() function on the respective 2020 column to remove the hyphens
#

Energy_2020['County'] = Energy_2020['County'].str.replace("-"," ")

# Displaying the resulting dataframe
Energy_2020['County'].unique()

"""## Accuracy of the data"""

Energy_2017.head(1)

# In-record & cross-datasets error checks
#2017 dataset accuracy check
e = Energy_2017['No_of_households_with_electricity'] + Energy_2017['No_of_households_with_Pressure_Lamp'] +Energy_2017['No_of_households_with_Lantern'] + Energy_2017['No_of_households_with_Tin_Lamp'] + Energy_2017['No_of_households_with_Gas_Lamp'] + Energy_2017['No_of_households_with_Fuel_wood'] + Energy_2017['No_of_households_with_Solar'] + Energy_2017['No_of_households_with_Other']
Energy_2017[Energy_2017['Households'] != e]

# In-record & cross-datasets error checks
#2020 dataset accuracy check
e1 = Energy_2020['No_of_households_with_electricity'] + Energy_2020['No_of_households_with_Pressure_Lamp'] +Energy_2020['No_of_households_with_Lantern'] + Energy_2020['No_of_households_with_Tin_Lamp'] + Energy_2020['No_of_households_with_Gas_Lamp'] + Energy_2020['No_of_households_with_Fuel_wood'] + Energy_2020['No_of_households_with_Solar'] + Energy_2020['No_of_households_with_Other']
Energy_2020[Energy_2020['Households'] != e1]

"""## Completeness of the data"""

# Checking if there is any missing value in 2017 dataset as a whole
Energy_2017.isnull().any()

# Checking if there is any missing value in 2020 dataset as a whole
Energy_2020.isnull().any()


# Checking if there is any missing value across each column and if so how many
# 2017 dataset
Energy_2017.isnull().sum()
# 2020 dataset
Energy_2020.isnull().sum()

"""## Consistency of the data"""

Energy_2017.head(1)

#Checking for duplicates
#2017 dataset (used households since some district names were duplicated but not the records)
Energy_2017[Energy_2017['Households'].duplicated() ==True]
#Rachuonyo was ignored because its household numbers different values
#Energy_2017[Energy_2017.duplicated(['_District'])==True].sort_values('_District')

#2020 dataset
Energy_2020[Energy_2020['County'].duplicated() ==True]

"""## Uniformity of the data"""

#Standardization of column names
#Using strip(), lower() and replace() functions
#2017 dataset
Energy_2017.columns = Energy_2017.columns.str.strip().str.lower()
Energy_2017.head(1)

#2020 dataset
Energy_2020.columns = Energy_2020.columns.str.strip().str.lower()
Energy_2020.head(1)

#checking data types
#2017 dataset
Energy_2017.info()

#2020 dataset
Energy_2020.info()

#2017 dataset group by to create a dataset of counties only like the 2020 datset
#Energy1_2017 = Energy_2017.groupby(['no_of_households_with_electricity', 'no_of_households_with_pressure_lamp', 'no_of_households_with_lantern', 'no_of_households_with_tin_lamp', 'no_of_households_with_gas_lamp', 'no_of_households_with_fuel_wood', 'no_of_households_with_solar','no_of_households_with_other'])['county'].sum().reset_index()
Energy1_2017 = Energy_2017.groupby(['county'])['no_of_households_with_electricity', 'no_of_households_with_pressure_lamp', 'no_of_households_with_lantern', 'no_of_households_with_tin_lamp', 'no_of_households_with_gas_lamp', 'no_of_households_with_fuel_wood', 'no_of_households_with_solar','no_of_households_with_other', 'households'].sum().reset_index()
Energy1_2017
#g1 = df1.groupby( [ "Name", "City"] ).count().reset_index()

#overall % elect
(Energy_2020['no_of_households_with_electricity'] +Energy_2020['no_of_households_with_solar']).sum()/Energy_2020['households'].sum()

"""Having carried out the above steps, it was observed that the two datasets were in fact the same original dataset based on 2011 data that had undergone cleaning. Additional research and data sourcing was carried out and the result was the adoption of the following data into our analysis

# DATA PREPARATION 2
"""

# Energy data from 2009
Energy_2009 = pd.read_csv('kenya-access-to-electricity-rates-per-county.csv')
Energy_2009.head()

# Making the above consistent with the previous data
Energy_2009.rename(columns= {'Counties': 'County', 'Access to electricity': 'percent_access_to_electricity' }, inplace = True)
Energy_2009.columns = Energy_2009.columns.str.strip().str.lower()
Energy_2009.head()

# Loading the world bank datasets into the environment

Source = pd.read_csv('share-elec-by-source.csv')
Fossil_Fuels = pd.read_csv('share-electricity-fossil-fuels.csv')
Carbon = pd.read_csv('share-electricity-low-carbon.csv')
Renewables = pd.read_csv('share-electricity-renewables.csv')
Electricity_access = pd.read_csv('share-of-the-population-with-access-to-electricity.csv')

# Previewing the datasets above
Source.head()

Fossil_Fuels.head()

Carbon.head()

Renewables.head()

Electricity_access.head()

# All data sets have values from 2000 that include all countries in the world.
# We'll need to access only data relative to Kenya
Source = Source[Source.Entity == 'Kenya']
Fossil_Fuels = Fossil_Fuels[Fossil_Fuels.Entity == 'Kenya']
Carbon = Carbon[Carbon.Entity == 'Kenya']
Renewables = Renewables[Renewables.Entity == 'Kenya']
Electricity_access = Electricity_access[Electricity_access.Entity == 'Kenya']

# We'll also drop the irrelevant column Code
Source.drop('Code', axis= 1, inplace=True)
Fossil_Fuels.drop('Code', axis= 1, inplace=True)
Carbon.drop('Code', axis= 1, inplace= True)
Renewables.drop('Code', axis= 1, inplace= True)
Electricity_access.drop('Code', axis= 1, inplace=True)

# Previewing the data
Source.head()

Fossil_Fuels.head()

Carbon.head()

Renewables.head()

Electricity_access.head()

# Consistency in columns
Source.columns = ['Entity', 'Year', 'Coal_percent_of_electricity', 'Oil_percent_of_electricity', 'Gas_percent_of_electricity', 'Nuclear_percent_of_electricity', 'Solar_percent_of_electricity',
                  'Wind_percent_of_electricity', 'Hydro_percent_of_electricity', 'Other_renewables_percent_of_electricity']
Fossil_Fuels.columns = ['Entity', 'Year', 'Fossil_Fuels_percent_of_electricity']
Carbon.columns = ['Entity', 'Year', 'Low_carbon_percent_of_electricity']
Renewables.columns = ['Entity', 'Year', 'Renewables_percent_of_electricity']
Electricity_access.columns = ['Entity', 'Year', 'percent_access_to_electricity']

"""# DATA CLEANING 2"""

#dropping average row from Energy dataset
Energy_2009.drop([0], axis=0, inplace=True)
Energy_2009.head(3)

#checking for null values
Energy_2009.isnull().sum()

#dropping null values
Energy_2009.dropna(inplace=True)
Energy_2009.isnull().sum()

#reseting the index
Energy_2009 = Energy_2009.reset_index()
Energy_2009.head(3)

#drop extra index column
Energy_2009.drop(['index'], axis=1, inplace=True)
Energy_2009.head()

#dropping fossil table as it's the same as the Oil % column in Source table.
#dropping Carbon table as it's the same as the renewables table.
#Appending renewables to the Sources column.

Source['percent_total_renewables'] = Renewables['Renewables_percent_of_electricity']
Source.head()

#Standardization of column names
#Using strip(), lower() and replace() functions
#Source table
Source.columns = Source.columns.str.strip().str.lower()
Source.head(1)

#reseting the index column
Source = Source.reset_index()
Source.head()

#drop extra index column
Source.drop('index', axis=1, inplace=True)
Source.head(1)

#Previewing the table
Electricity_access.head()

#Standardization of column names
#Using strip(), lower() and replace() functions
#Electricity table
Electricity_access.columns = Electricity_access.columns.str.strip().str.lower()
Electricity_access.head(1)

#reseting the index column
Electricity_access = Electricity_access.reset_index()
Electricity_access.head()

#drop extra index column
Electricity_access.drop('index', axis=1, inplace=True)
Electricity_access.head(1)

"""# DATA ANALYSIS

## Compare 2009 and 2011 datasets

### Compare households with electricity (%) 2009-2011
"""

#2011 dataset preview
Energy_2011 = Energy1_2017.copy(deep= True)
Energy_2011.head(1)

#2009 dataset preview
#Energy_2009.head(2)

#Calculating % of households with electricity in 2011 dataset
e = (Energy_2011['no_of_households_with_electricity'] + Energy_2011['no_of_households_with_solar'])/(Energy_2011['households'])
e1 = e*100
#calculating difference in electricity connectivity between 2009 and 2011

Energy_2011['percent_growth_elec_2009_2011'] = e1 - Energy_2009['percent_access_to_electricity']
Energy_2011.head()

"""### Compare households without electricity (%) 2009-2011"""

#Non renewable energy in this year as country hadn’t started projects (*except hydro)
#2009
Energy_2009['percent_without_elec'] = (100-(Energy_2009['percent_access_to_electricity']))
Energy_2009.head()

#2011
#% with electricity
Energy_2011['percent_with_elec'] = e1
Energy_2011.head()
#% without electricity
Energy_2011['percent_without_elec'] = (100 -e1)
Energy_2011.head()

"""## 2011 analysis: Compare renewable energy 2011 with World Bank


"""

Source

Electricity_access

Electricity_total = (Energy_2011['no_of_households_with_electricity'].sum() + Energy_2011['no_of_households_with_solar'].sum()) / Energy_2011['households'].sum()
Electricity_total * 100

# Check if 2011 solar adds up to 0.305242% as reported by World Bank
Solar = Energy_2011['no_of_households_with_solar'].sum() / (Energy_2011['no_of_households_with_electricity'].sum() + Energy_2011['no_of_households_with_solar'].sum())
Solar_percentage = Solar * 100
Solar_percentage
#Source.loc[Source.year == 2011, 'solar_percent_of_electricity'] / Solar_percentage
# Value shows that the World Bank solar percentage is lower than the 2011 dataset from Open Data.

# Check if 2011 electricity percentage matches hydro or oil as reported by World Bank
Electricity = Energy_2011['no_of_households_with_electricity'].sum() / (Energy_2011['no_of_households_with_electricity'].sum() + Energy_2011['no_of_households_with_solar'].sum())
Elec_percentage = Electricity * 100
Elec_percentage
# Source.loc[Source.year == 2011, ''] / Solar_percentage

"""### Is the country in line with 2020 and 2030 targets?

"""

#using access to elec diff btwn 09 and 11 was there progress in inc. access?(overall)
#maybe divide that by number of years(2) and use that value loosely to calc. whether by 2020 and 2030 goals of 80 and 100
#will be met.
#80% divide by 2020-2009 to see annual ideal annual trend and compare to above.

"""## WORLD BANK DATASETS

### Compare general stats for Kenya (2009 & 2011) with World Bank datasets for Validity
"""

#sum 2009,11 and compare WB corresponding years. Bar chart(09/11)

"""### Observe share of the population with access to electricity over the years (trend)

"""

#population with electricity over the years
Electricity_access.head()

Electricity_access.plot(x='year', y='percent_access_to_electricity',figsize= (20,10), label ='Access to Electricity')
plt.title('Proportion of Kenyan Population with Access to Electricity')
plt.xlabel('YEAR')
plt.ylabel('Population with Access to Electricity(%)')
plt.show()

##possible recommendations: try and explain reason for dips using secondary sources of data

"""### Observe share of electricity by source over the years (trend)"""

#share of electricity by source over the years
Source.head()

#defining what to plot and how to do it
plt.figure(figsize= (20,10))
plt.plot(Source['year'], Source['coal_percent_of_electricity'],'r', label='Coal')
plt.plot(Source['year'], Source['oil_percent_of_electricity'], 'b', label='Oil')
plt.plot(Source['year'], Source['hydro_percent_of_electricity'], 'g', label='Hydro')
plt.plot(Source['year'], Source['gas_percent_of_electricity'], 'c', label= 'Gas')
plt.plot(Source['year'], Source['nuclear_percent_of_electricity'], 'm', label='Nuclear')
plt.plot(Source['year'], Source['solar_percent_of_electricity'], 'y', label='Solar')
plt.plot(Source['year'], Source['wind_percent_of_electricity'], 'k', label='Wind')
plt.plot(Source['year'], Source['other_renewables_percent_of_electricity'], '0.6', label='Other Renewables')


#plotting all the types onto the same plot for comparison
plt.title('Proportion of Energy Type Sources for Electricity Used in Kenya')
plt.xlabel('YEAR')
plt.ylabel('Percentage Source Type of Electricity(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.legend()
plt.show()

"""### Observe share of electricity with fossil fuels over the years (trend)"""

#Fossil fuel usage will be the sum of all carbon sourced energy forms
#creating a column to reflect that
#Nuclear energy was not included as a fossil fuel
Source['fossil_percent_of_electricity'] = Source['coal_percent_of_electricity'] + Source['oil_percent_of_electricity'] + Source['gas_percent_of_electricity']
Source.head()

#plotting the share of fossil fuel over the years
Source.plot(x='year', y='fossil_percent_of_electricity',figsize= (20,10), label= 'Fossil')
plt.title('Proportion of Fossil Fuel as Electricity Source in Kenya')
plt.xlabel('Years')
plt.ylabel('Fossil Fuel as Electricity Source(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.show()

"""### Observe trend of carbon emissions over the years

"""

#The trend of Carbon Emissions can be tracked by the trend of the use of fossil fuel as shown above/previous cell.

"""### Observe share of electricity with renewable energy over the years (trend)

"""

#Renewables usage
#plotting the share of renewables over the years
Source.plot(x='year', y='percent_total_renewables',figsize= (20,10), label = 'Renewables')
plt.title('Proportion of Renewables as Electricity Source in Kenya')
plt.xlabel('Years')
plt.ylabel('Renewables as Electricity Source(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.show()

"""### Comparison of electricity with renewable vs fossil fuel"""

#plotting both together to view the trends simultaneously over the years
#defining what to plot and how to do it
plt.figure(figsize= (20,10))
plt.plot(Source['year'], Source['fossil_percent_of_electricity'],'r', label='Fossil')
plt.plot(Source['year'], Source['percent_total_renewables'], 'g', label='Renewables')


#plotting both types onto the same plot for comparison
plt.title('Proportion of Fossil Vs Renewable Energy as Electricity Sources Used in Kenya')
plt.xlabel('YEAR')
plt.ylabel('Source of Electricity(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.legend()
plt.show()

"""### Is the country in line with 30% reduction of fossil fuel from 2015?"""

#2019 - 2015 fossil fuel, is it == to 30%?

"""### Is the country in line to achieve 80% renewable energy as the primary energy source?(2020)"""

#check renewable % by 2019, then forecast to 2020?

"""### Is the country in line to achieve 100% renewable energy as the primary energy source?(2022)"""

#renewable plot up to 2019 average that over the remaining year for 2020 and 2022???
