# -*- coding: utf-8 -*-
"""Copy of Panthers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CSsPd4G2HiPjL2WTevlGVAhxoJIZT4DL

Kenya’s goal is to reach 100% electricity connectivity by 2022. This is to enable a green economy run by 100% sustainable energy in terms of electricity generation and consumption. Additionally, in accordance with the Paris Agreement, Kenya committed itself to tackling climate change. The country’s determined contribution (National Determined Contribution), which is pegged on the 2013 Kenya Climate Change Action Plan, promises to reduce greenhouse gas (GHG) emissions by 30% by 2030 from 2015 (Ministry
of Environment and Natural Resources 2015).

The goal of this project is to determine what the current consumption of electricity is, type of energy source and how does it compare over the duration of the data and the Vision 2030 goals?

# DATA PREPARATION
"""

# Commented out IPython magic to ensure Python compatibility.
# Loading libraries into our environment

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

# Loading the datasets into the environment

Energy_2020 = pd.read_csv('Energy_Main_Lighting_Energy_Sources.csv')
Energy_2017 = pd.read_csv('Main_Lighting_Energy_Sources_averaged_to_Districts_in_2009.csv')

# Previewing Energy 2020
Energy_2020.head()

# Previewing Energy 2017
Energy_2017.head()

# Understanding the information contained in Energy 2020 columns
Energy_2020.info()

# Understanding the information contained in Energy 2017 columns
Energy_2017.info()

# Dropping unrequired fields from Energy 2020

Energy_2020.drop(['Electricty_percentage', 'Pressure_Lamp_percentage', 'Lantern_percentage', 'Tin_Lamp_percebntage', 'Gas_Lamp_percentage', 'Fuel_wood_percentage', 'Solar_percentage', 'Other_Lighting_percentage'], axis= 1, inplace= True)
Energy_2020.drop(['OBJECTID','Shape_Length', 'Shape_Area'], axis= 1, inplace= True)

# Dropping unrequired fields from Energy 2017
Energy_2017.drop(['%_of_households_with_electricty', '%_of_households_with_Pressure_Lamp', '%_of_households_with_Lantern', '%_of_households_with_Tin_Lamp', '%_of_households_with_Gas_Lamp', '%_of_households_with_Fuel_wood'], axis= 1, inplace= True)
Energy_2017.drop(['%_of_households_with_Solar', '%_of_households_with_Other', 'Province', 'Census_Table', 'MTEF', 'MTP', 'Longtitude', 'Latitude', 'Geolocation', 'OBJECTID'], axis= 1, inplace= True)

# Viewing the new table Energy 2020
Energy_2020.head()

# Viewing the new table Energy 2017
Energy_2017.head()

# Making the data consistent
Energy_2020.columns = Energy_2020.columns.str.replace('Number','No')
Energy_2017.drop('Rural_/_Urban', axis= 1, inplace= True)

# Prepared Table for Energy 2020
Energy_2020.head()

# Prepared Table for Energy 2017
Energy_2017.head()



"""# DATA CLEANING

## Validity of the data
"""

#2017 dataset column name rectification
Energy_2017.rename(columns= {'Housheolds': 'Households'}, inplace = True)
Energy_2017.head(2)

#Using the str.strip function on the column name to strip any leading and trailing spaces
Energy_2017['County'] = Energy_2017['County'].str.strip()
Energy_2020['County'] = Energy_2020['County'].str.strip()

# Displaying the resulting dataframe
Energy_2017.head(4)
Energy_2020.head(2)

#checking for errors/anomalies in records
Energy_2017['County'].unique()
Energy_2020['County'].unique()

#Using str.replace() function on the respective 2017 column to remove the apostrophe Murang'a
#

Energy_2017['County'] = Energy_2017['County'].str.replace("'","")

# Displaying the resulting dataframe
Energy_2017['County'].unique()

#Using str.replace() function on the respective 2020 column to remove the hyphens
#

Energy_2020['County'] = Energy_2020['County'].str.replace("-"," ")

# Displaying the resulting dataframe
Energy_2020['County'].unique()

"""## Accuracy of the data"""

Energy_2017.head(1)

# In-record & cross-datasets error checks
#2017 dataset accuracy check
e = Energy_2017['No_of_households_with_electricity'] + Energy_2017['No_of_households_with_Pressure_Lamp'] +Energy_2017['No_of_households_with_Lantern'] + Energy_2017['No_of_households_with_Tin_Lamp'] + Energy_2017['No_of_households_with_Gas_Lamp'] + Energy_2017['No_of_households_with_Fuel_wood'] + Energy_2017['No_of_households_with_Solar'] + Energy_2017['No_of_households_with_Other']
Energy_2017[Energy_2017['Households'] != e]

# In-record & cross-datasets error checks
#2020 dataset accuracy check
e1 = Energy_2020['No_of_households_with_electricity'] + Energy_2020['No_of_households_with_Pressure_Lamp'] +Energy_2020['No_of_households_with_Lantern'] + Energy_2020['No_of_households_with_Tin_Lamp'] + Energy_2020['No_of_households_with_Gas_Lamp'] + Energy_2020['No_of_households_with_Fuel_wood'] + Energy_2020['No_of_households_with_Solar'] + Energy_2020['No_of_households_with_Other']
Energy_2020[Energy_2020['Households'] != e1]

"""## Completeness of the data"""

# Checking if there is any missing value in 2017 dataset as a whole
Energy_2017.isnull().any()

# Checking if there is any missing value in 2020 dataset as a whole
Energy_2020.isnull().any()


# Checking if there is any missing value across each column and if so how many
# 2017 dataset
Energy_2017.isnull().sum()
# 2020 dataset
Energy_2020.isnull().sum()

"""## Consistency of the data"""

Energy_2017.head(1)

#Checking for duplicates
#2017 dataset (used households since some district names were duplicated but not the records)
Energy_2017[Energy_2017['Households'].duplicated() ==True]
#Rachuonyo was ignored because its household numbers different values
#Energy_2017[Energy_2017.duplicated(['_District'])==True].sort_values('_District')

#2020 dataset
Energy_2020[Energy_2020['County'].duplicated() ==True]

"""## Uniformity of the data"""

#Standardization of column names
#Using strip(), lower() and replace() functions
#2017 dataset
Energy_2017.columns = Energy_2017.columns.str.strip().str.lower()
Energy_2017.head(1)

#2020 dataset
Energy_2020.columns = Energy_2020.columns.str.strip().str.lower()
Energy_2020.head(1)

#checking data types
#2017 dataset
Energy_2017.info()

#2020 dataset
Energy_2020.info()

#2017 dataset group by to create a dataset of counties only like the 2020 datset
#Energy1_2017 = Energy_2017.groupby(['no_of_households_with_electricity', 'no_of_households_with_pressure_lamp', 'no_of_households_with_lantern', 'no_of_households_with_tin_lamp', 'no_of_households_with_gas_lamp', 'no_of_households_with_fuel_wood', 'no_of_households_with_solar','no_of_households_with_other'])['county'].sum().reset_index()
Energy1_2017 = Energy_2017.groupby(['county'])['no_of_households_with_electricity', 'no_of_households_with_pressure_lamp', 'no_of_households_with_lantern', 'no_of_households_with_tin_lamp', 'no_of_households_with_gas_lamp', 'no_of_households_with_fuel_wood', 'no_of_households_with_solar','no_of_households_with_other', 'households'].sum().reset_index()
Energy1_2017
#g1 = df1.groupby( [ "Name", "City"] ).count().reset_index()

#overall % elect
(Energy_2020['no_of_households_with_electricity'] +Energy_2020['no_of_households_with_solar']).sum()/Energy_2020['households'].sum()

"""Having carried out the above steps, it was observed that the two datasets were in fact the same original dataset based on 2011 data that had undergone cleaning. Additional research and data sourcing was carried out and the result was the adoption of the following data into our analysis

# DATA PREPARATION 2
"""

# Energy data from 2009
Energy_2009 = pd.read_csv('kenya-access-to-electricity-rates-per-county.csv')
Energy_2009.head()

# Making the above consistent with the previous data
Energy_2009.rename(columns= {'Counties': 'County', 'Access to electricity': 'percent_access_to_electricity' }, inplace = True)
Energy_2009.columns = Energy_2009.columns.str.strip().str.lower()
copy_2009 = Energy_2009.copy(deep=True)
Energy_2009.head()

# Loading the world bank datasets into the environment

Source = pd.read_csv('share-elec-by-source.csv')
Fossil_Fuels = pd.read_csv('share-electricity-fossil-fuels.csv')
Carbon = pd.read_csv('share-electricity-low-carbon.csv')
Renewables = pd.read_csv('share-electricity-renewables.csv')
Electricity_access = pd.read_csv('share-of-the-population-with-access-to-electricity.csv')

# Previewing the datasets above
Source.head()

Fossil_Fuels.head()

Carbon.head()

Renewables.head()

Electricity_access.head()

# All data sets have values from 2000 that include all countries in the world.
# We'll need to access only data relative to Kenya
Source = Source[Source.Entity == 'Kenya']
Fossil_Fuels = Fossil_Fuels[Fossil_Fuels.Entity == 'Kenya']
Carbon = Carbon[Carbon.Entity == 'Kenya']
Renewables = Renewables[Renewables.Entity == 'Kenya']
Electricity_access = Electricity_access[Electricity_access.Entity == 'Kenya']

# We'll also drop the irrelevant column Code
Source.drop('Code', axis= 1, inplace=True)
Fossil_Fuels.drop('Code', axis= 1, inplace=True)
Carbon.drop('Code', axis= 1, inplace= True)
Renewables.drop('Code', axis= 1, inplace= True)
Electricity_access.drop('Code', axis= 1, inplace=True)

# Previewing the data
Source.head()

Fossil_Fuels.head()

Carbon.head()

Renewables.head()

Electricity_access.head()

# Consistency in columns
Source.columns = ['Entity', 'Year', 'Coal_percent_of_electricity', 'Oil_percent_of_electricity', 'Gas_percent_of_electricity', 'Nuclear_percent_of_electricity', 'Solar_percent_of_electricity',
                  'Wind_percent_of_electricity', 'Hydro_percent_of_electricity', 'Other_renewables_percent_of_electricity']
Fossil_Fuels.columns = ['Entity', 'Year', 'Fossil_Fuels_percent_of_electricity']
Carbon.columns = ['Entity', 'Year', 'Low_carbon_percent_of_electricity']
Renewables.columns = ['Entity', 'Year', 'Renewables_percent_of_electricity']
Electricity_access.columns = ['Entity', 'Year', 'percent_access_to_electricity']

"""# DATA CLEANING 2"""

#dropping average row from Energy dataset
Energy_2009.drop([0], axis=0, inplace=True)
Energy_2009.head(3)

#checking for null values
Energy_2009.isnull().sum()

#dropping null values
Energy_2009.dropna(inplace=True)
Energy_2009.isnull().sum()

#reseting the index
Energy_2009 = Energy_2009.reset_index()
Energy_2009.head(3)

#drop extra index column
Energy_2009.drop(['index'], axis=1, inplace=True)
Energy_2009.head()

#dropping fossil table as it's the same as the Oil % column in Source table.
#dropping Carbon table as it's the same as the renewables table.
#Appending renewables to the Sources column.

Source['percent_total_renewables'] = Renewables['Renewables_percent_of_electricity']
Source.head()

#Standardization of column names
#Using strip(), lower() and replace() functions
#Source table
Source.columns = Source.columns.str.strip().str.lower()
Source.head(1)

#reseting the index column
Source = Source.reset_index()
Source.head()

#drop extra index column
Source.drop('index', axis=1, inplace=True)
Source.head(1)

#Previewing the table
Electricity_access.head()

#Standardization of column names
#Using strip(), lower() and replace() functions
#Electricity table
Electricity_access.columns = Electricity_access.columns.str.strip().str.lower()
Electricity_access.head(1)

#reseting the index column
Electricity_access = Electricity_access.reset_index()
Electricity_access.head()

#drop extra index column
Electricity_access.drop('index', axis=1, inplace=True)
Electricity_access.head(1)

"""# DATA ANALYSIS

## Compare 2009 and 2011 datasets

### Compare households with electricity (%) 2009-2011
"""

#2011 dataset preview
Energy_2011 = Energy1_2017.copy(deep= True)
Energy_2011.head(1)

#2009 dataset preview
#Energy_2009.head(2)

#Calculating % of households with electricity in 2011 dataset
e = (Energy_2011['no_of_households_with_electricity'] + Energy_2011['no_of_households_with_solar'])/(Energy_2011['households'])
e1 = e*100
#calculating difference in electricity connectivity between 2009 and 2011

Energy_2011['percent_growth_elec_2009_2011'] = e1 - Energy_2009['percent_access_to_electricity']
Energy_2011.head()

"""### County with highest growth between 2009 and 2011 in terms of Electricity access"""

#county with largest growth/ % change between 2009 and 2011
larg = Energy_2011['percent_growth_elec_2009_2011'].max()
larg
Energy_2011.loc[Energy_2011['percent_growth_elec_2009_2011'] == larg]

"""### County with lowest growth between 2009 and 2011 in terms of Electricity access"""

#county with lowest growth/ % change between 2009 and 2011
smal = Energy_2011['percent_growth_elec_2009_2011'].min()
smal
Energy_2011.loc[Energy_2011['percent_growth_elec_2009_2011'] == smal]

"""### 2009 Electricity Accessibility compared to World Bank records(2009)"""

copy_2009.head()

#from copy_2009 we have the country average as 23% we can check whether 2009 dataset aligns
#with World Bank dataset.
Electricity_access.iloc[19, 2:] == 23

"""### Compare households without electricity (%) 2009-2011"""

#Non renewable energy in this year as country hadn’t started projects (*except hydro)
#2009
Energy_2009['percent_without_elec'] = (100-(Energy_2009['percent_access_to_electricity']))
Energy_2009.head()

#2011
#% with electricity
Energy_2011['percent_with_elec'] = e1
Energy_2011.head()
#% without electricity
Energy_2011['percent_without_elec'] = (100 -e1)
Energy_2011.head()

"""### Compare households with electricity (%) 2009-2011"""

# Comparing overall accessibility to electricity in Kenya between 2009 and 2011
#creating variable 2009 overal country accessibility to Elec
v2009 = copy_2009.iloc[0, 2]
v2009
#variable to store/reference overall 2019 connectivity to Elec
o19 = (Energy_2011['no_of_households_with_electricity'] + Energy_2011['no_of_households_with_solar']).sum()/(Energy_2011['households']).sum()
v2011 = round(o19*100,1)
v2011
#list to store years compared
l = [2009,2011]
#var to store both 2009 and 2011 accessibility values as list
a = [v2009,v2011]

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(l, a,color ='maroon',  width = 0.5)

plt.xlabel("YEAR")
plt.ylabel("Access to Electricity(%)")
plt.title("Comparison Between 2009 and 2011 Access to Electricity")
plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

"""## 2011 analysis: Compare renewable energy 2011 with World Bank

### Most Common Energy Source for Electricity across Kenyan Counties
"""

copy_2011 = Energy_2011.copy(deep=True)
copy_2011.head()

#most common/ most prevalent energy source for electricity across Kenya
#dropping irrelevant columns and csaving into a new dataframe
mc = Energy_2011.drop(['percent_growth_elec_2009_2011','percent_with_elec','percent_without_elec'], axis=1)
#grouping by aggregating all rows
mc1 = mc.groupby([True]*len(mc)).sum()

#showing the relevant column with the highest number
mc1.columns.max()

#Getting the distribution of households in descending order of most used source for elec
mc_list = mc1.sum()
mc_list.sort_values(ascending=False)

#in terms of % of total households(tin lamps)
round((mc1['no_of_households_with_tin_lamp'])/(mc1['households'])*100,2)

"""### Type of Energy Source for Electricity Mostly relied on by individual counties

Electricity use in %
"""

#Electricity highest counties by proportion
#% elec pop per county
copy_2011['percent_using_elec_source'] = round((copy_2011['no_of_households_with_electricity']/copy_2011['households'])*100,2)
copy_2011.head()

#Electricity highest counties in %
eh = copy_2011.groupby('county')['percent_using_elec_source'].sum()
eh.nlargest(3)

#Electricity scarce counties by proportion in %
eh.nsmallest(3)

"""Pressure lamp use in %"""

#Pressure lamp use highest counties by proportion
#% pressure lamp use pop per county
copy_2011['percent_using_pressure_lamp'] = round((copy_2011['no_of_households_with_pressure_lamp']/copy_2011['households'])*100,2)
copy_2011.head()

#Pressure lamp use highest counties in %
plh = copy_2011.groupby('county')['percent_using_pressure_lamp'].sum()
plh.nlargest(3)

#Pressure lamp least use counties by proportion in %
plh.nsmallest(3)

"""Lantern use in %"""

#Lantern use highest counties by proportion
#% lantern use pop per county
copy_2011['percent_using_lantern'] = round((copy_2011['no_of_households_with_lantern']/copy_2011['households'])*100,2)
copy_2011.head()

#Lantern use highest counties in %
lh = copy_2011.groupby('county')['percent_using_lantern'].sum()
lh.nlargest(3)

#Lantern least use counties by proportion in %
lh.nsmallest(3)

"""Tin Lamp use in %"""

#Tin lamp use highest counties by proportion
#% tin lamp use pop per county
copy_2011['percent_using_tin_lamp'] = round((copy_2011['no_of_households_with_tin_lamp']/copy_2011['households'])*100,2)
copy_2011.head()

#Tin lamp use highest counties in %
tlh = copy_2011.groupby('county')['percent_using_tin_lamp'].sum()
tlh.nlargest(3)

#Tin lamp least use counties by proportion in %
tlh.nsmallest(3)

"""Gas Lamp use in %"""

#Gas lamp use highest counties by proportion
#% gas lamp use pop per county
copy_2011['percent_using_gas_lamp'] = round((copy_2011['no_of_households_with_gas_lamp']/copy_2011['households'])*100,2)
copy_2011.head()

#Gas lamp use highest counties in %
glh = copy_2011.groupby('county')['percent_using_gas_lamp'].sum()
glh.nlargest(3)

#Gas lamp least use counties by proportion in %
glh.nsmallest(3)

"""Wood use in %"""

#Wood use highest counties by proportion
#% wood use pop per county
copy_2011['percent_using_fuel_wood'] = round((copy_2011['no_of_households_with_fuel_wood']/copy_2011['households'])*100,2)
copy_2011.head()

#Wood use highest counties in %
wh = copy_2011.groupby('county')['percent_using_fuel_wood'].sum()
wh.nlargest(3)

#Wood least use counties by proportion in %
wh.nsmallest(3)

"""Solar use in %"""

#Solar use highest counties by proportion
#% solar use pop per county
copy_2011['percent_using_solar'] = round((copy_2011['no_of_households_with_solar']/copy_2011['households'])*100,2)
copy_2011.head()

#Solar use highest counties in %
sh = copy_2011.groupby('county')['percent_using_solar'].sum()
sh.nlargest(3)

#Solar least use counties by proportion in %
sh.nsmallest(3)

"""Other sources in %"""

#Other source use highest counties by proportion
#% other source use pop per county
copy_2011['percent_using_other'] = round((copy_2011['no_of_households_with_other']/copy_2011['households'])*100,2)
copy_2011.head()

#Solar use highest counties in %
oh = copy_2011.groupby('county')['percent_using_other'].sum()
oh.nlargest(3)

#Other source least use counties by proportion in %
oh.nsmallest(3)

"""### Comparison between renewable energy 2011 with World Bank"""

#Electricity connectivity 2011 in %
Electricity_total = (Energy_2011['no_of_households_with_electricity'].sum() + Energy_2011['no_of_households_with_solar'].sum()) / Energy_2011['households'].sum()
e2011 = round(Electricity_total * 100, 2)
e2011
#but W.B showed 29% access in 2011

e2011 == Electricity_access.iloc[21, 2:]

# Check if 2011 solar adds up to 0.305242% as reported by World Bank
Solar = Energy_2011['no_of_households_with_solar'].sum() / (Energy_2011['no_of_households_with_electricity'].sum() + Energy_2011['no_of_households_with_solar'].sum())
Solar_percentage = Solar * 100
round(Solar_percentage,2)
#Source.loc[Source.year == 2011, 'solar_percent_of_electricity'] / Solar_percentage
# Value shows that the World Bank solar percentage is lower than the 2011 dataset from Open Data.

# Check if 2011 electricity percentage matches hydro as reported by World Bank
Electricity = Energy_2011['no_of_households_with_electricity'].sum() / (Energy_2011['no_of_households_with_electricity'].sum() + Energy_2011['no_of_households_with_solar'].sum())
Elec_percentage = round(Electricity * 100,2)
Elec_percentage
# Source.loc[Source.year == 2011, ''] / Solar_percentage

"""## WORLD BANK DATASETS

### Compare general stats for Kenya (2009 & 2011) with World Bank datasets for Validity
"""

#sum 2009,11 and compare WB corresponding years. Bar chart(09/11)

"""### Observe share of the population with access to electricity over the years (trend)

"""

#population with electricity over the years
Electricity_access.head()

Electricity_access.plot(x='year', y='percent_access_to_electricity',figsize= (20,10), label ='Access to Electricity')
plt.title('Proportion of Kenyan Population with Access to Electricity')
plt.xlabel('YEAR')
plt.ylabel('Population with Access to Electricity(%)')
plt.show()

##possible recommendations: try and explain reason for dips using secondary sources of data

"""### Observe share of electricity by source over the years (trend)"""

#share of electricity by source over the years
Source.head()

#defining what to plot and how to do it
plt.figure(figsize= (20,10))
plt.plot(Source['year'], Source['coal_percent_of_electricity'],'r', label='Coal')
plt.plot(Source['year'], Source['oil_percent_of_electricity'], 'b', label='Oil')
plt.plot(Source['year'], Source['hydro_percent_of_electricity'], 'g', label='Hydro')
plt.plot(Source['year'], Source['gas_percent_of_electricity'], 'c', label= 'Gas')
plt.plot(Source['year'], Source['nuclear_percent_of_electricity'], 'm', label='Nuclear')
plt.plot(Source['year'], Source['solar_percent_of_electricity'], 'y', label='Solar')
plt.plot(Source['year'], Source['wind_percent_of_electricity'], 'k', label='Wind')
plt.plot(Source['year'], Source['other_renewables_percent_of_electricity'], '0.6', label='Other Renewables')


#plotting all the types onto the same plot for comparison
plt.title('Proportion of Energy Type Sources for Electricity Used in Kenya')
plt.xlabel('YEAR')
plt.ylabel('Percentage Source Type of Electricity(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.legend()
plt.show()

"""### Observe share of electricity with fossil fuels over the years (trend)"""

#Fossil fuel usage will be the sum of all carbon sourced energy forms
#creating a column to reflect that
#Nuclear energy was not included as a fossil fuel
Source['fossil_percent_of_electricity'] = Source['coal_percent_of_electricity'] + Source['oil_percent_of_electricity'] + Source['gas_percent_of_electricity']
Source.head()

#plotting the share of fossil fuel over the years
Source.plot(x='year', y='fossil_percent_of_electricity',figsize= (20,10), label= 'Fossil')
plt.title('Proportion of Fossil Fuel as Electricity Source in Kenya')
plt.xlabel('Years')
plt.ylabel('Fossil Fuel as Electricity Source(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.show()

"""### Observe trend of carbon emissions over the years

"""

#The trend of Carbon Emissions can be tracked by the trend of the use of fossil fuel as shown above/previous cell.

"""### Observe share of electricity with renewable energy over the years (trend)

"""

#Renewables usage
#plotting the share of renewables over the years
Source.plot(x='year', y='percent_total_renewables',figsize= (20,10), label = 'Renewables')
plt.title('Proportion of Renewables as Electricity Source in Kenya')
plt.xlabel('Years')
plt.ylabel('Renewables as Electricity Source(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.show()

"""### Comparison of electricity with renewable vs fossil fuel"""

#plotting both together to view the trends simultaneously over the years
#defining what to plot and how to do it
plt.figure(figsize= (20,10))
plt.plot(Source['year'], Source['fossil_percent_of_electricity'],'r', label='Fossil')
plt.plot(Source['year'], Source['percent_total_renewables'], 'g', label='Renewables')


#plotting both types onto the same plot for comparison
plt.title('Proportion of Fossil Vs Renewable Energy as Electricity Sources Used in Kenya')
plt.xlabel('YEAR')
plt.ylabel('Source of Electricity(%)')
plt.xticks(np.arange(min(Source['year']), max(Source['year']), 2.0))
plt.legend()
plt.show()

"""### Is the country in line with 30% reduction of fossil fuel from 2015?"""

#2019 - 2015 fossil fuel, is it == to 30%?

"""### Is the country in line to achieve 80% renewable energy as the primary energy source?(2020)"""

#check renewable % by 2019, then forecast to 2020?

"""### Is the country in line to achieve 100% renewable energy as the primary energy source?(2022)"""

#renewable plot up to 2019 average that over the remaining year for 2020 and 2022???

"""# DATA ANALYSIS 2

## The most common source of energy for electricity
"""

# Let's load the relevant global datasets here

Global_source = pd.read_csv('share-elec-by-source.csv')
Global_source.head()

Global_renewables = pd.read_csv('share-electricity-renewables.csv')
Global_renewables.head()

# Let's merge the 2 datasets as we had analysed them earlier and found them compatible

Global_source['percent_Renewables_Total'] = Global_renewables['Renewables (% electricity)']
Global_source.head()

# Let's make the column titles consistent
Global_source.columns = ['Entity', 'Code', 'Year', 'percent_coal_electricity', 'percent_oil_electricity', 'percent_gas_electricity', 'percent_nuclear_electricity', 'percent_solar_electricity', 'percent_wind_electricity', 'percent_hydro_electricity', 'percent_other_renewables', 'percent_renewables_total']
Global_source.head()

# Using the 2019 data for all countries
Most_Recent = Global_source[Global_source.Year == 2019]
Most_Recent.Entity.unique()

# From the above we can see a World row, we'll ignore it and reintroduce it later to check validity of our results
# We'll also remove the continents indicated i.e. Africa, Europe and North America.
# Australia is both a country and continent, therefore, we'll leave it in when analysing countries
Most_Recent_countries = Most_Recent[(Most_Recent['Entity'] != 'World') & (Most_Recent['Entity'] != 'Africa')  & (Most_Recent['Entity'] != 'Europe')  & (Most_Recent['Entity'] != 'North America')].copy(deep=True)
Most_Recent_countries_coal = Most_Recent_countries.percent_coal_electricity.sum() / Most_Recent_countries.percent_coal_electricity.count()
Most_Recent_countries_oil = Most_Recent_countries.percent_oil_electricity.sum() / Most_Recent_countries.percent_oil_electricity.count()
Most_Recent_countries_gas = Most_Recent_countries.percent_gas_electricity.sum() / Most_Recent_countries.percent_gas_electricity.count()
Most_Recent_countries_nuclear = Most_Recent_countries.percent_nuclear_electricity.sum() / Most_Recent_countries.percent_nuclear_electricity.count()
Most_Recent_countries_solar = Most_Recent_countries.percent_solar_electricity.sum() / Most_Recent_countries.percent_solar_electricity.count()
Most_Recent_countries_wind = Most_Recent_countries.percent_wind_electricity.sum() / Most_Recent_countries.percent_wind_electricity.count()
Most_Recent_countries_hydro = Most_Recent_countries.percent_hydro_electricity.sum() / Most_Recent_countries.percent_hydro_electricity.count()
Most_Recent_countries_other_renewables = Most_Recent_countries.percent_other_renewables.sum() / Most_Recent_countries.percent_other_renewables.count()
Most_Recent_countries_renewables_total = Most_Recent_countries.percent_renewables_total.sum() / Most_Recent_countries.percent_renewables_total.count()

Usage_2019 = [Most_Recent_countries_coal,Most_Recent_countries_oil,Most_Recent_countries_gas,Most_Recent_countries_nuclear,Most_Recent_countries_solar,Most_Recent_countries_wind,Most_Recent_countries_hydro,Most_Recent_countries_other_renewables]
c = ['coal','oil','gas','nuclear','solar','wind','hydro','other_renewables']
l = pd.DataFrame(Usage_2019,index = c)
l
# Below, we see the predominant source world-wide is oil, followed by hydro and finally gas.
# The least contributors are solar, other renewables and wind

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(c,Usage_2019,color ='maroon',  width = 0.5)

plt.xlabel("Source of Electricty")
plt.ylabel("Electricty(%)")
plt.title("Global Sources of Electricity in 2019")
# plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

# Now using the World row only, to verify the results above
Most_Recent_World = Most_Recent[Most_Recent['Entity'] == 'World'].copy(deep=True)
Most_Recent_World
# There's a difference here that needs to be analyzed

# Iterating over each row to get the values
for index, rows in Most_Recent_World.iterrows():
    # Creating a list for the current row
    World_2019 =[rows.percent_coal_electricity, rows.percent_oil_electricity, rows.percent_gas_electricity, rows.percent_nuclear_electricity, rows.percent_solar_electricity, rows.percent_wind_electricity, rows.percent_hydro_electricity, rows.percent_other_renewables]


Names = ['coal','oil','gas','nuclear','solar','wind','hydro','other_renewables']

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(Names,World_2019,color ='maroon',  width = 0.5)

plt.xlabel("Source of Electricty")
plt.ylabel("Electricty(%)")
plt.title("World Row Sources of Electricity in 2019")
# plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

# Africa only

Most_Recent_Africa = Most_Recent[Most_Recent['Entity'] == 'Africa'].copy(deep=True)
Most_Recent_Africa

# Iterating over each row to get the values
for index, rows in Most_Recent_Africa.iterrows():
    # Creating a list for the current row
    Africa_list =[rows.percent_coal_electricity, rows.percent_oil_electricity, rows.percent_gas_electricity, rows.percent_nuclear_electricity, rows.percent_solar_electricity, rows.percent_wind_electricity, rows.percent_hydro_electricity, rows.percent_other_renewables]

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(Names,Africa_list,color ='blue',  width = 0.5)

plt.xlabel("Source of Electricty")
plt.ylabel("Electricty(%)")
plt.title("World Row Sources of Electricity in 2019")
# plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

# East Africa only

Most_Recent_EA = Most_Recent[(Most_Recent['Entity'] == 'Kenya') | (Most_Recent['Entity'] == 'Tanzania') |
                             (Most_Recent['Entity'] == 'Uganda') | (Most_Recent['Entity'] == 'South Sudan') |
                             (Most_Recent['Entity'] == 'Ethiopia') | (Most_Recent['Entity'] == 'Rwanda') |
                             (Most_Recent['Entity'] == 'Burundi')].copy(deep=True)
Most_Recent_EA

Most_Recent_EA_coal = Most_Recent_EA.percent_coal_electricity.sum() / Most_Recent_EA.percent_coal_electricity.count()
Most_Recent_EA_oil = Most_Recent_EA.percent_oil_electricity.sum() / Most_Recent_EA.percent_oil_electricity.count()
Most_Recent_EA_gas = Most_Recent_EA.percent_gas_electricity.sum() / Most_Recent_EA.percent_gas_electricity.count()
Most_Recent_EA_nuclear = Most_Recent_EA.percent_nuclear_electricity.sum() / Most_Recent_EA.percent_nuclear_electricity.count()
Most_Recent_EA_solar = Most_Recent_EA.percent_solar_electricity.sum() / Most_Recent_EA.percent_solar_electricity.count()
Most_Recent_EA_wind = Most_Recent_EA.percent_solar_electricity.sum() / Most_Recent_EA.percent_solar_electricity.count()
Most_Recent_EA_hydro = Most_Recent_EA.percent_hydro_electricity.sum() / Most_Recent_EA.percent_hydro_electricity.count()
Most_Recent_EA_other_renewables = Most_Recent_EA.percent_other_renewables.sum() / Most_Recent_EA.percent_other_renewables.count()
Most_Recent_EA_renewables_total = Most_Recent_EA.percent_renewables_total.sum() / Most_Recent_EA.percent_renewables_total.count()

EA_Usage_2019 = [Most_Recent_EA_coal,Most_Recent_EA_oil,Most_Recent_EA_gas,Most_Recent_EA_nuclear,Most_Recent_EA_solar,Most_Recent_EA_wind,
      Most_Recent_EA_hydro,Most_Recent_EA_other_renewables]

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(Names,EA_Usage_2019,color ='red',  width = 0.5)

plt.xlabel("Source of Electricty")
plt.ylabel("Electricty(%)")
plt.title("East African Sources of Electricity in 2019")
# plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

# Kenya Only

Most_Recent_Kenya = Most_Recent[Most_Recent['Entity'] == 'Kenya'].copy(deep= True)
Most_Recent_Kenya

for index, rows in Most_Recent_Kenya.iterrows():
    # Creating a list for the current row
    Kenya_2019 =[rows.percent_coal_electricity, rows.percent_oil_electricity, rows.percent_gas_electricity, rows.percent_nuclear_electricity, rows.percent_solar_electricity, rows.percent_wind_electricity, rows.percent_hydro_electricity, rows.percent_other_renewables]

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(Names,Kenya_2019,color ='blue',  width = 0.5)

plt.xlabel("Source of Electricty")
plt.ylabel("Electricty(%)")
plt.title("Kenya Sources of Electricity in 2019")
# plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

Most_Recent_Kenya['Fossil_Fuels_Total'] = (Most_Recent_Kenya.percent_coal_electricity + Most_Recent_Kenya.percent_oil_electricity + Most_Recent_Kenya.percent_gas_electricity)
Most_Recent_Kenya

Most_Recent_EA['Fossil_Fuels_Total'] = (Most_Recent_EA.percent_coal_electricity + Most_Recent_EA.percent_oil_electricity + Most_Recent_EA.percent_gas_electricity)
Most_Recent_EA

Most_Recent_Africa['Fossil_Fuels_Total'] = (Most_Recent_Africa.percent_coal_electricity + Most_Recent_Africa.percent_oil_electricity + Most_Recent_Africa.percent_gas_electricity)
Most_Recent_Africa

Most_Recent_World['Fossil_Fuels_Total'] = (Most_Recent_World.percent_coal_electricity + Most_Recent_World.percent_oil_electricity + Most_Recent_World.percent_gas_electricity)
Most_Recent_World

Most_Recent_countries['Fossil_Fuels_Total'] = (Most_Recent_countries.percent_coal_electricity + Most_Recent_countries.percent_oil_electricity + Most_Recent_countries.percent_gas_electricity)
Most_Recent_countries.head()

Most_Recent_countries_Fuel_total = Most_Recent_countries['Fossil_Fuels_Total'].sum() / Most_Recent_countries['Fossil_Fuels_Total'].count()
Most_Recent_countries_renewables_total

Most_Recent_World_Fuel_total = Most_Recent_World['Fossil_Fuels_Total'].sum() / Most_Recent_World['Fossil_Fuels_Total'].count()
Most_Recent_World.percent_renewables_total
for index, rows in Most_Recent_World['percent_renewables_total'].iteritems():
    # Creating a list for the current row
    a = rows
    print(a)
# We've realised a problem here. the percent renewable column doesn't add up to the percent solar + wind +hydro + other renewables

# To fix the above problem

Most_Recent_World.drop('percent_renewables_total', axis= 1, inplace= True)

# Add the new column with total percentage of renewable
Most_Recent_World['Renewables_total'] = Most_Recent_World.percent_solar_electricity + Most_Recent_World.percent_wind_electricity + Most_Recent_World.percent_hydro_electricity + Most_Recent_World.percent_other_renewables
Most_Recent_World.head()

# We should do the same for the countries Dataset as it seems there's a point where the data didn't match due to merging
# the Sources dataset with the Renewables total Dataset

Most_Recent_countries.drop('percent_renewables_total', axis= 1, inplace= True)
Most_Recent_countries.head()

Most_Recent_countries['Renewables_total'] = Most_Recent_countries.percent_solar_electricity + Most_Recent_countries.percent_wind_electricity + Most_Recent_countries.percent_hydro_electricity + Most_Recent_countries.percent_other_renewables
Most_Recent_countries.head()

# Compare Kenyan Renewable and Fossil Fuel to the world using Countries data

Most_Recent_Kenya.percent_renewables_total
for index, rows in Most_Recent_Kenya['percent_renewables_total'].iteritems():
    # Creating a list for the current row
    Kenya_renewable_2019 = rows
    print(Kenya_renewable_2019)

for index, rows in Most_Recent_Kenya['Fossil_Fuels_Total'].iteritems():

  # Creating a list for the current row
    Kenya_Fuel_2019 = rows
    print(Kenya_Fuel_2019)

Most_Recent_countries_Renewables_total = Most_Recent_countries.Renewables_total.sum() / Most_Recent_countries.Renewables_total.count()
Most_Recent_countries_Fuel_total
Most_Recent_countries_Renewables_total

g = [[Kenya_renewable_2019,Most_Recent_countries_Renewables_total], [Kenya_Fuel_2019,Most_Recent_countries_Fuel_total]]
Global_comparison = pd.DataFrame(g, columns=['Kenya', 'Rest of the World'], index= ['Renewables', 'Fossil Fuels'])

Global_comparison.plot(kind='barh')

# Compare Kenyan Renewable and Fossil Fuel to the world using World Row data

Most_Recent_World.Renewables_total
for index, rows in Most_Recent_World['Renewables_total'].iteritems():
    # Creating a list for the current row
    World_renewable_2019 = rows
    print(World_renewable_2019)

for index, rows in Most_Recent_World['Fossil_Fuels_Total'].iteritems():
    # Creating a list for the current row
    World_Fuels_2019 = rows
    print(World_Fuels_2019)

w = [[Kenya_renewable_2019,World_renewable_2019], [Kenya_Fuel_2019,World_Fuels_2019]]
World_comparison = pd.DataFrame(w, columns=['Kenya', 'Rest of the World'], index= ['Renewables', 'Fossil Fuels'])

World_comparison.plot(kind='barh')

Most_Recent_Africa.head()
for index, rows in Most_Recent_Africa['percent_renewables_total'].iteritems():
    # Creating a list for the current row
    Africa_renewable_2019 = rows
    print(Africa_renewable_2019)

for index, rows in Most_Recent_Africa['Fossil_Fuels_Total'].iteritems():
    # Creating a list for the current row
    Africa_Fuels_2019 = rows
    print(Africa_Fuels_2019)

a = [[Kenya_renewable_2019,Africa_renewable_2019], [Kenya_Fuel_2019,Africa_Fuels_2019]]
Africa_comparison = pd.DataFrame(a, columns=['Kenya', 'Africa'], index= ['Renewables', 'Fossil Fuels'])

Africa_comparison.plot(kind='barh')

Most_Recent_EA

# We notice that from Rwanda onwards, the percent_renewables_total column has a similar issue
# to the World row. We'll have to drop this and carry out the necessary calculations as we did before.

Most_Recent_EA.drop('percent_renewables_total', axis= 1, inplace= True)

Most_Recent_EA['Renewables_Total'] = Most_Recent_EA.percent_solar_electricity + Most_Recent_EA.percent_wind_electricity + Most_Recent_EA.percent_hydro_electricity + Most_Recent_EA.percent_other_renewables
Most_Recent_EA

Most_Recent_EA_Renewables_total = Most_Recent_EA.Renewables_Total.sum() / Most_Recent_EA.Renewables_Total.count()
Most_Recent_EA_Fuels_Total = Most_Recent_EA.Fossil_Fuels_Total.sum() / Most_Recent_EA.Fossil_Fuels_Total.count()
Most_Recent_EA_Renewables_total
Most_Recent_EA_Fuels_Total

e = [[Kenya_renewable_2019,Most_Recent_EA_Renewables_total], [Kenya_Fuel_2019,Most_Recent_EA_Fuels_Total]]
EA_comparison = pd.DataFrame(e, columns=['Kenya', 'East Africa'], index= ['Renewables', 'Fossil Fuels'])

EA_comparison.plot(kind='barh')

"""## How does Kenya compare to the rest of the world in terms of access to electricity?"""

Access = pd.read_csv('share-of-the-population-with-access-to-electricity.csv')
Access.head()

Access.drop('Code', axis= 1, inplace= True)
Access.columns= ['Entity', 'Year', 'percentage_electricity_access']
Access.head()

Most_Recent_Access = Access[Access['Year'] == 2016]
Most_Recent_Access.Entity.unique()

#'Sub-Saharan Africa' and 'World' rows can be used for analysis in comparison to Kenya
# Additionally, East African countries can be grouped to compare with Kenya


Recent_World_Access = Most_Recent_Access[Most_Recent_Access.Entity == 'World']
Recent_SSA_Access = Most_Recent_Access[Most_Recent_Access.Entity == 'Sub-Saharan Africa']
Recent_Kenya_Access = Most_Recent_Access[Most_Recent_Access.Entity == 'Kenya']
Recent_EA_Access = Most_Recent_Access[(Most_Recent_Access.Entity == 'Kenya') | (Most_Recent_Access.Entity == 'Tanzania') |
                   (Most_Recent_Access.Entity == 'Uganda') | (Most_Recent_Access.Entity == 'South Sudan') |
                   (Most_Recent_Access.Entity == 'Ethiopia') | (Most_Recent_Access.Entity == 'Rwanda') |
                   (Most_Recent_Access.Entity == 'Burundi')]
Recent_EA_Access
# From below, we can see Kenya leads in access to electricity in East Africa with Burundi lagging.

for index, rows in Recent_World_Access['percentage_electricity_access'].iteritems():
    # Creating a list for the current row
    World_Access_2016 = rows
    print(World_Access_2016)

for index, rows in Recent_SSA_Access['percentage_electricity_access'].iteritems():
    # Creating a list for the current row
    SSA_Access_2016 = rows
    print(SSA_Access_2016)

for index, rows in Recent_Kenya_Access['percentage_electricity_access'].iteritems():
    # Creating a list for the current row
    Kenya_Access_2016 = rows
    print(Kenya_Access_2016)

EA_Access_2016 = Recent_EA_Access.percentage_electricity_access.sum() / Recent_EA_Access.percentage_electricity_access.count()
EA_Access_2016

Sections = ['World', 'Sub-Saharan Africa', 'East Africa', 'Kenya']
Elec_list = [World_Access_2016, SSA_Access_2016, EA_Access_2016, Kenya_Access_2016]

#Plotting comparison
plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(Sections,Elec_list,color ='green',  width = 0.5)

plt.xlabel("Kenya vs The World")
plt.ylabel("Access to Electricty(%)")
plt.title("Kenya's access to electricity as compared to the World (as of 2016)")
# plt.xticks(np.arange(2009, 2012,1.0))
plt.show()

"""## The highest growth source of electricity since 2013 globally? (Significant year due to the Paris Climate Agreement)"""

Year_2013 = Global_source[Global_source.Year == 2013].copy(deep=True)
Year_2013.drop('percent_renewables_total', axis= 1, inplace= True) # To avoid problems faced earlier due to merging Sources data with Renewanles total Data

# Accessing Countries only
Year_2013_countries = Year_2013[(Year_2013['Entity'] != 'World') & (Year_2013['Entity'] != 'Africa')  & (Year_2013['Entity'] != 'Europe')  & (Year_2013['Entity'] != 'North America')]
Year_2013_countries.head()
Year_2013_countries_coal = Year_2013_countries.percent_coal_electricity.sum() / Year_2013_countries.percent_coal_electricity.count()
Year_2013_countries_oil = Year_2013_countries.percent_oil_electricity.sum() / Year_2013_countries.percent_oil_electricity.count()
Year_2013_countries_gas = Year_2013_countries.percent_gas_electricity.sum() / Year_2013_countries.percent_gas_electricity.count()
Year_2013_countries_nuclear = Year_2013_countries.percent_nuclear_electricity.sum() / Year_2013_countries.percent_nuclear_electricity.count()
Year_2013_countries_solar = Year_2013_countries.percent_solar_electricity.sum() / Year_2013_countries.percent_solar_electricity.count()
Year_2013_countries_wind = Year_2013_countries.percent_wind_electricity.sum() / Year_2013_countries.percent_wind_electricity.count()
Year_2013_countries_hydro = Year_2013_countries.percent_hydro_electricity.sum() / Year_2013_countries.percent_hydro_electricity.count()
Year_2013_countries_other_renewables = Year_2013_countries.percent_other_renewables.sum() / Year_2013_countries.percent_other_renewables.count()

Usage_2013 = [Year_2013_countries_coal,Year_2013_countries_oil,Year_2013_countries_gas,Year_2013_countries_nuclear,Year_2013_countries_solar,Year_2013_countries_wind,Year_2013_countries_hydro,Year_2013_countries_other_renewables]
type(Usage_2013)
type(Usage_2019)
# Recall Usage_2019 and source names c from the analysis of most recent (2019) countries data

Usage_df = pd.DataFrame({
    "2013":Usage_2013,
    "2019":Usage_2019,
    }, index= c)

Usage_df
# It doesn't look like there was much change

Usage_df.plot(kind="barh")
plt.title("World Countries 2013 vs 2019 Sources")
plt.xlabel("Electricity (%)")
plt.ylabel("Sources of Electricity")

Global_growth = Usage_df['2019'] - Usage_df['2013']
Global_growth
# From below we can see most growth is in wind, and least growth is in hydro

# Verifying with World Row
Year_2013_World = Year_2013[Year_2013['Entity'] == 'World'].copy(deep= True)
Year_2013_World

for index, rows in Year_2013_World.iterrows():
    # Creating a list for the current row
    World_2013 =[rows.percent_coal_electricity, rows.percent_oil_electricity, rows.percent_gas_electricity, rows.percent_nuclear_electricity, rows.percent_solar_electricity, rows.percent_wind_electricity, rows.percent_hydro_electricity, rows.percent_other_renewables]
    print(World_2013)

World_Usage_df = pd.DataFrame({
    "2013":World_2013,
    "2019":World_2019,
    }, index= c)

World_Usage_df

# It doesn't look like there was much change

World_Usage_df.plot(kind="barh")
plt.title("World 2013 vs 2019 Sources")
plt.xlabel("Electricity (%)")
plt.ylabel("Sources of Electricity")

World_growth = World_Usage_df['2019'] - World_Usage_df['2013']
World_growth
# The most growth is in wind and the least is in coal

# East Africa

EA_2013 = Year_2013[(Year_2013['Entity'] == 'Kenya') | (Year_2013['Entity'] == 'Tanzania') |
                             (Year_2013['Entity'] == 'Uganda') | (Year_2013['Entity'] == 'South Sudan') |
                             (Year_2013['Entity'] == 'Ethiopia') | (Year_2013['Entity'] == 'Rwanda') |
                             (Year_2013['Entity'] == 'Burundi')]
EA_2013
EA_2013_coal = EA_2013.percent_coal_electricity.sum() / EA_2013.percent_coal_electricity.count()
EA_2013_oil = EA_2013.percent_oil_electricity.sum() / EA_2013.percent_oil_electricity.count()
EA_2013_gas = EA_2013.percent_gas_electricity.sum() / EA_2013.percent_gas_electricity.count()
EA_2013_nuclear = EA_2013.percent_nuclear_electricity.sum() / EA_2013.percent_nuclear_electricity.count()
EA_2013_solar = EA_2013.percent_solar_electricity.sum() / EA_2013.percent_solar_electricity.count()
EA_2013_wind = EA_2013.percent_wind_electricity.sum() / EA_2013.percent_wind_electricity.count()
EA_2013_hydro = EA_2013.percent_hydro_electricity.sum() / EA_2013.percent_hydro_electricity.count()
EA_2013_other_renewables = EA_2013.percent_other_renewables.sum() / EA_2013.percent_other_renewables.count()

EA_Usage_2013 = [EA_2013_coal,EA_2013_oil,EA_2013_gas,EA_2013_nuclear,EA_2013_solar,EA_2013_wind,EA_2013_hydro,EA_2013_other_renewables]

EA_Usage_df = pd.DataFrame({
    "2013":EA_Usage_2013,
    "2019":EA_Usage_2019,
    }, index= c)

EA_Usage_df

EA_Usage_df.plot(kind="barh")
plt.title("East Africa 2013 vs 2019 Sources")
plt.xlabel("Electricity (%)")
plt.ylabel("Sources of Electricity")

EA_growth = EA_Usage_df['2019'] - EA_Usage_df['2013']
EA_growth

# Gas has most growth, oil has the least

# Kenya

Year_2013_Kenya = Year_2013[Year_2013['Entity'] == 'Kenya'].copy(deep= True)
Year_2013_Kenya

for index, rows in Year_2013_Kenya.iterrows():
    # Creating a list for the current row
    Kenya_2013 =[rows.percent_coal_electricity, rows.percent_oil_electricity, rows.percent_gas_electricity, rows.percent_nuclear_electricity, rows.percent_solar_electricity, rows.percent_wind_electricity, rows.percent_hydro_electricity, rows.percent_other_renewables]
    print(Kenya_2013)

Kenya_Usage_df = pd.DataFrame({
    "2013":Kenya_2013,
    "2019":Kenya_2019,
    }, index= c)

Kenya_Usage_df

Kenya_Usage_df.plot(kind="barh")
plt.title("Kenya 2013 vs 2019 Sources")
plt.xlabel("Electricity (%)")
plt.ylabel("Sources of Electricity")

Kenya_growth = Kenya_Usage_df['2019'] - Kenya_Usage_df['2013']
Kenya_growth
# Other renewables have seen more growth while hydro has seen the least
